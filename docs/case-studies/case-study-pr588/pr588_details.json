{"author":{"id":"MDQ6VXNlcjE0MzE5MDQ=","is_bot":false,"login":"konard","name":"Konstantin Diachenko"},"baseRefName":"develop","body":"## Summary\n\nFixes #575 - Resolves a KeyError that occurred when using `FromDishka[WebSocket]` in FastAPI WebSocket handlers without also having a plain `WebSocket` parameter.\n\n## Problem\n\nWhen a WebSocket handler used only `ws: FromDishka[WebSocket]` (without a plain `websocket: WebSocket` parameter), it would raise a `KeyError` at runtime:\n\n```python\n@router.websocket(\"/\")\n@inject\nasync def ws(\n    ws: FromDishka[WebSocket],\n) -\u003e None:\n    # KeyError: '___dishka_request'\n```\n\nThe temporary workaround was to add an unused plain WebSocket parameter:\n\n```python\n@router.websocket(\"/\")\n@inject\nasync def ws(\n    _: WebSocket,  # Workaround\n    ws: FromDishka[WebSocket],\n) -\u003e None:\n    # Works\n```\n\n## Root Cause\n\nThe issue was in the `_wrap_fastapi_injection()` function in `src/dishka/integrations/fastapi.py`:\n\n1. When no plain `Request` or `WebSocket` parameter was found, the code would add a synthetic `___dishka_request` parameter of type `Request`\n2. This synthetic parameter was used to access the dishka container via `.state.dishka_container`\n3. However, WebSocket handlers receive `WebSocket` objects from FastAPI, not `Request` objects\n4. When the injected function tried to access `kwargs[\"___dishka_request\"].state.dishka_container`, it failed with a KeyError because FastAPI never provided a `___dishka_request` parameter to WebSocket handlers\n\nThe original attempt to fix this by modifying `_find_request_param()` was treating the symptom rather than the root cause, as pointed out in the code review feedback.\n\n## Solution\n\nThe fix detects whether the function is a WebSocket handler by checking if it has `FromDishka[WebSocket]` dependencies:\n\n1. Added a new `_needs_websocket_param()` function that checks if any `FromDishka` dependencies are of type `WebSocket`\n2. Created a new `DISHKA_WEBSOCKET_PARAM` synthetic parameter (in addition to the existing `DISHKA_REQUEST_PARAM`)\n3. Modified `_wrap_fastapi_injection()` to choose the appropriate synthetic parameter:\n   - If the function has `FromDishka[WebSocket]` dependencies, add `___dishka_websocket: WebSocket`\n   - Otherwise, add `___dishka_request: Request`\n4. Both Request and WebSocket objects have `.state.dishka_container`, so the container access works correctly\n\n## Changes\n\n- **src/dishka/integrations/fastapi.py**: \n  - Added `DISHKA_WEBSOCKET_PARAM` constant\n  - Added `_needs_websocket_param()` helper function\n  - Modified `_wrap_fastapi_injection()` to detect WebSocket handlers and add the appropriate parameter\n  - Added imports for `get_args` and `get_origin` from typing\n- **tests/integrations/fastapi/test_fastapi_websockets.py**: Added regression test `test_fromdishka_websocket_only()`\n\n## Testing\n\nAdded a new test case that reproduces the original issue:\n\n```python\nasync def get_with_fromdishka_websocket_only(\n    ws: FromDishka[WebSocket],\n    mock: FromDishka[Mock],\n) -\u003e None:\n    await ws.accept()\n    await ws.receive()\n    mock(\"ok\")\n    await ws.send_text(\"passed\")\n```\n\nThis test verifies that handlers can use `FromDishka[WebSocket]` without requiring a plain `WebSocket` parameter.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)","commits":[{"authoredDate":"2025-10-09T07:48:03Z","authors":[{"email":"drakonard@gmail.com","id":"MDQ6VXNlcjE0MzE5MDQ=","login":"konard","name":"konard"}],"committedDate":"2025-10-09T07:48:03Z","messageBody":"Adding CLAUDE.md with task information for AI processing.\nThis file will be removed when the task is complete.\n\nIssue: https://github.com/reagento/dishka/issues/575","messageHeadline":"Initial commit with task details for issue #575","oid":"5ec21e248a109ba320b7e7c6ac812a1d70b8990d"},{"authoredDate":"2025-10-09T07:52:18Z","authors":[{"email":"drakonard@gmail.com","id":"MDQ6VXNlcjE0MzE5MDQ=","login":"konard","name":"konard"},{"email":"noreply@anthropic.com","id":"MDQ6VXNlcjgxODQ3","login":"claude","name":"Claude"}],"committedDate":"2025-10-09T07:52:18Z","messageBody":"â€¦ parameter\n\nThe issue occurred when _find_request_param() found parameters marked with\nFromDishka (e.g., FromDishka[WebSocket]) and tried to use them to access\nthe container. However, wrap_injection() removes FromDishka parameters from\nthe function signature, causing a KeyError when the wrapped function tries\nto access them via kwargs.\n\nThe fix ensures _find_request_param() only considers plain Request/WebSocket\nparameters (not wrapped in FromDishka) by checking each parameter with\ndefault_parse_dependency().\n\nAdded regression test for the issue.\n\nFixes #575\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude \u003cnoreply@anthropic.com\u003e","messageHeadline":"Fix KeyError when using FromDishka[WebSocket] without plain WebSocketâ€¦","oid":"90d5eb86cc3dd96c4922212d1af0f77cbdc5104c"},{"authoredDate":"2025-10-09T07:56:26Z","authors":[{"email":"drakonard@gmail.com","id":"MDQ6VXNlcjE0MzE5MDQ=","login":"konard","name":"konard"},{"email":"noreply@anthropic.com","id":"MDQ6VXNlcjgxODQ3","login":"claude","name":"Claude"}],"committedDate":"2025-10-09T07:56:26Z","messageBody":"ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude \u003cnoreply@anthropic.com\u003e","messageHeadline":"Remove experiment and config files","oid":"55a7c0937e4eb3abe47eb6630f83ec9eb1c0a836"},{"authoredDate":"2025-10-09T08:09:40Z","authors":[{"email":"drakonard@gmail.com","id":"MDQ6VXNlcjE0MzE5MDQ=","login":"konard","name":"konard"},{"email":"noreply@anthropic.com","id":"MDQ6VXNlcjgxODQ3","login":"claude","name":"Claude"}],"committedDate":"2025-10-09T08:09:40Z","messageBody":"Fix ruff E501 errors by breaking long lines in test_fromdishka_websocket_only\nto comply with 79 character line limit.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude \u003cnoreply@anthropic.com\u003e","messageHeadline":"Fix line length violations in websocket test","oid":"7c1faa3a3f0e3554cde0ee25390f1404eab8958c"},{"authoredDate":"2025-10-09T08:36:50Z","authors":[{"email":"drakonard@gmail.com","id":"MDQ6VXNlcjE0MzE5MDQ=","login":"konard","name":"konard"},{"email":"noreply@anthropic.com","id":"MDQ6VXNlcjgxODQ3","login":"claude","name":"Claude"}],"committedDate":"2025-10-09T08:36:50Z","messageBody":"â€¦arameter\n\nThe root cause was that when a WebSocket handler had only FromDishka[WebSocket]\nparameters (no plain WebSocket parameter), the code would add a synthetic\nRequest parameter (___dishka_request) instead of a WebSocket parameter.\nThis caused a KeyError because FastAPI provides WebSocket objects to WebSocket\nhandlers, not Request objects.\n\nThe fix detects when a function has FromDishka[WebSocket] dependencies and\nadds a WebSocket parameter instead of a Request parameter in such cases.\n\nThis addresses the feedback that the previous fix was treating symptoms rather\nthan the root cause.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude \u003cnoreply@anthropic.com\u003e","messageHeadline":"Fix KeyError by detecting WebSocket handlers and adding appropriate pâ€¦","oid":"f45a1756102cffd250097698a891f839bf0bccce"},{"authoredDate":"2025-10-09T08:48:27Z","authors":[{"email":"drakonard@gmail.com","id":"MDQ6VXNlcjE0MzE5MDQ=","login":"konard","name":"konard"},{"email":"noreply@anthropic.com","id":"MDQ6VXNlcjgxODQ3","login":"claude","name":"Claude"}],"committedDate":"2025-10-09T08:48:27Z","messageBody":"Shortened the docstring on line 125 to comply with the 79 character line\nlength limit enforced by ruff.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude \u003cnoreply@anthropic.com\u003e","messageHeadline":"Fix line length violation in docstring","oid":"07b92e8197b3b0641f8ded1084e263325ebaa6b9"},{"authoredDate":"2025-10-09T09:06:34Z","authors":[{"email":"drakonard@gmail.com","id":"MDQ6VXNlcjE0MzE5MDQ=","login":"konard","name":"konard"},{"email":"noreply@anthropic.com","id":"MDQ6VXNlcjgxODQ3","login":"claude","name":"Claude"}],"committedDate":"2025-10-09T09:06:34Z","messageBody":"Refactored the conditional logic in _wrap_fastapi_injection() to use\nelif instead of nested if within else block, as required by ruff linter\n(PLR5501).\n\nThis change improves code readability while maintaining the same logic:\n- First check if param_name exists (plain Request/WebSocket parameter)\n- Then check if WebSocket parameter is needed (FromDishka[WebSocket])\n- Otherwise use Request parameter\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude \u003cnoreply@anthropic.com\u003e","messageHeadline":"Fix code style: use elif instead of else-if","oid":"c897cafff24692c704d35378f73df38349cd4fb5"}],"createdAt":"2025-10-09T07:48:22Z","headRefName":"issue-575-1134b6a2","state":"OPEN","title":"Fix KeyError when using FromDishka[WebSocket] without plain WebSocket parameter","url":"https://github.com/reagento/dishka/pull/588"}
