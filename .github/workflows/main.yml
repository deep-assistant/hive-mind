name: CI/CD Pipeline for main branch

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # === DETECT CHANGES ===
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      mjs-changed: ${{ steps.changes.outputs.mjs }}
      package-changed: ${{ steps.changes.outputs.package }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      workflow-changed: ${{ steps.changes.outputs.workflow }}
      any-code-changed: ${{ steps.changes.outputs.code }}
      new-version: ${{ steps.changes.outputs.new-version }}
      version: ${{ steps.changes.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Detect changes and check version
      id: changes
      run: |
        # For PRs, compare against base branch; for pushes, compare with previous commit
        EVENT_NAME="${{ github.event_name }}"
        if [ "$EVENT_NAME" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          git fetch origin $BASE_SHA
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA 2>/dev/null || echo "")
        else
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD 2>/dev/null || git ls-tree --name-only -r HEAD)
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check for .mjs file changes
        if echo "$CHANGED_FILES" | grep -q '\.mjs$'; then
          echo "mjs=true" >> $GITHUB_OUTPUT
        else
          echo "mjs=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for package.json changes
        if echo "$CHANGED_FILES" | grep -q '^package\.json$'; then
          echo "package=true" >> $GITHUB_OUTPUT
        else
          echo "package=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for documentation changes
        if echo "$CHANGED_FILES" | grep -q '\.md$'; then
          echo "docs=true" >> $GITHUB_OUTPUT
        else
          echo "docs=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for workflow changes
        if echo "$CHANGED_FILES" | grep -q '\.github/workflows/'; then
          echo "workflow=true" >> $GITHUB_OUTPUT
        else
          echo "workflow=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for any code changes (.mjs, package.json, or workflows)
        if echo "$CHANGED_FILES" | grep -qE '\.(mjs|json|yml|yaml)$|\.github/workflows/'; then
          echo "code=true" >> $GITHUB_OUTPUT
        else
          echo "code=false" >> $GITHUB_OUTPUT
        fi
        
        # Check version status
        # Only check for new versions on main branch pushes
        if [ "${{ github.ref }}" != "refs/heads/main" ] || [ "${{ github.event_name }}" != "push" ]; then
          echo "Not a main branch push - skipping version check"
          echo "new-version=false" >> $GITHUB_OUTPUT
        else
          if [ ! -f "package.json" ]; then
            echo "new-version=false" >> $GITHUB_OUTPUT
            echo "No package.json found"
          else
            VERSION=$(node -p "require('./package.json').version")
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            
            # Check if version is already published on NPM
            if npm view "$PACKAGE_NAME@$VERSION" version 2>/dev/null; then
              echo "Version $VERSION already published"
              echo "new-version=false" >> $GITHUB_OUTPUT
            else
              echo "New version $VERSION detected - will publish"
              echo "new-version=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            fi
          fi
        fi
        
        # Debug output
        echo "============ Debug Output ============"
        echo "GitHub ref: ${{ github.ref }}"
        echo "Event name: ${{ github.event_name }}"
        echo "All outputs written to GITHUB_OUTPUT:"
        cat $GITHUB_OUTPUT || echo "Could not read GITHUB_OUTPUT"
        echo "======================================"

  # === VERSION BUMP VERIFICATION ===
  verify-version-bump:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Verify version bump
      run: |
        echo "=== Version Bump Verification ==="

        # Get base and head refs
        BASE_REF="${{ github.event.pull_request.base.ref }}"
        HEAD_REF="${{ github.event.pull_request.head.ref }}"
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"

        echo "Base branch: $BASE_REF ($BASE_SHA)"
        echo "Head branch: $HEAD_REF ($HEAD_SHA)"

        # Fetch the base branch
        git fetch origin $BASE_REF:$BASE_REF

        # Get current version from package.json
        if [ ! -f "package.json" ]; then
          echo "‚ùå No package.json found in PR"
          exit 1
        fi

        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version in PR: $CURRENT_VERSION"

        # Get base version from package.json
        git checkout $BASE_SHA -- package.json 2>/dev/null || {
          echo "‚ùå Could not get package.json from base branch"
          exit 1
        }

        if [ ! -f "package.json" ]; then
          echo "‚ùå No package.json found in base branch"
          exit 1
        fi

        BASE_VERSION=$(node -p "require('./package.json').version")
        echo "Base version: $BASE_VERSION"

        # Restore current package.json
        git checkout $HEAD_SHA -- package.json

        # Compare versions using semver (Node.js native comparison)
        COMPARISON=$(node -e "
          function compareSemver(a, b) {
            const aParts = a.split('.').map(Number);
            const bParts = b.split('.').map(Number);

            for (let i = 0; i < 3; i++) {
              if (aParts[i] > bParts[i]) return 1;
              if (aParts[i] < bParts[i]) return -1;
            }
            return 0;
          }

          const current = '$CURRENT_VERSION';
          const base = '$BASE_VERSION';
          console.log(compareSemver(current, base));
        ")

        echo "Comparing versions: $CURRENT_VERSION vs $BASE_VERSION (result: $COMPARISON)"

        if [ "$COMPARISON" -le 0 ]; then
          if [ "$COMPARISON" -eq 0 ]; then
            echo "‚ùå Version has not been bumped!"
          else
            echo "‚ùå Version in PR ($CURRENT_VERSION) is LOWER than base version ($BASE_VERSION)!"
          fi
          echo "   Current version in PR: $CURRENT_VERSION"
          echo "   Base version in main: $BASE_VERSION"
          echo ""
          echo "üí° Please bump the version in package.json to be strictly greater than $BASE_VERSION."
          echo "   You can use semantic versioning:"
          echo "   - Patch (bug fixes): npm version patch"
          echo "   - Minor (new features): npm version minor"
          echo "   - Major (breaking changes): npm version major"
          exit 1
        else
          echo "‚úÖ Version has been bumped from $BASE_VERSION to $CURRENT_VERSION"
        fi

  # === COMPILATION & SYNTAX CHECKS ===
  test-compilation:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-code-changed == 'true' || needs.detect-changes.outputs.workflow-changed == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Test solve.mjs compilation
      run: |
        echo "Testing solve.mjs compilation..."
        timeout 30s node --check src/solve.mjs
        echo "‚úÖ solve.mjs compiles successfully"
        
    - name: Test hive.mjs compilation
      run: |
        echo "Testing hive.mjs compilation..."
        timeout 30s node --check src/hive.mjs
        echo "‚úÖ hive.mjs compiles successfully"
        
    - name: Check Node.js syntax for all .mjs files
      run: |
        echo "Checking syntax for all .mjs files..."
        for file in *.mjs; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            timeout 10s node --check "$file"
          fi
        done
        for file in src/*.mjs; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            timeout 10s node --check "$file"
          fi
        done
        for file in tests/*.mjs; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            node --check "$file"
          fi
        done

  # === ESLINT CODE QUALITY CHECK ===
  lint:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.mjs-changed == 'true' || needs.detect-changes.outputs.workflow-changed == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: |
        echo "Running ESLint code quality checks..."
        npm run lint
        echo "‚úÖ ESLint checks passed"

  # === FILE LINE LIMIT CHECK ===
  check-file-line-limits:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.mjs-changed == 'true' || needs.detect-changes.outputs.workflow-changed == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check .mjs file line limits
      run: |
        echo "Checking that all .mjs files are under 1500 lines..."

        # Create a temporary file to track failures
        FAILURES_FILE=$(mktemp)

        # Check all .mjs files in the repository
        find . -name "*.mjs" -type f | while read -r file; do
          line_count=$(wc -l < "$file")
          echo "üìÑ $file: $line_count lines"

          if [ $line_count -gt 1500 ]; then
            echo "‚ùå ERROR: $file has $line_count lines, which exceeds the 1500 line limit!"
            echo "::error file=$file::File has $line_count lines (limit: 1500)"
            echo "$file" >> "$FAILURES_FILE"
          else
            echo "‚úÖ $file is within the 1500 line limit"
          fi
        done

        # Check if any failures occurred
        if [ -s "$FAILURES_FILE" ]; then
          echo ""
          echo "‚ùå The following .mjs files exceed the 1500 line limit:"
          cat "$FAILURES_FILE"
          echo ""
          echo "Please reorganize the code to split large files into smaller modules."
          echo "Each .mjs file should have no more than 1500 lines of code."
          rm -f "$FAILURES_FILE"
          exit 1
        else
          echo ""
          echo "‚úÖ All .mjs files are within the 1500 line limit!"
          rm -f "$FAILURES_FILE"
        fi

  # === UNIT TESTS ===
  test-suites:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-compilation]
    if: needs.detect-changes.outputs.any-code-changed == 'true' || needs.detect-changes.outputs.workflow-changed == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install dependencies
      run: npm install

    - name: Run test suite for solve.mjs
      run: |
        echo "Running test suite for solve.mjs..."
        node tests/test-solve.mjs
    
    - name: Run test suite for hive.mjs
      run: |
        echo "Running test suite for hive.mjs..."
        node tests/test-hive.mjs
    
    - name: Run test suite for memory-check.mjs
      run: |
        echo "Running test suite for memory-check.mjs..."
        node tests/test-memory-check.mjs

    - name: Run feedback lines regression test (Issue #168)
      run: |
        echo "Running feedback lines regression test..."
        node tests/test-feedback-lines-simple.mjs

    - name: Run feedback lines integration test (Issue #168)
      env:
        GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_USER_TOKEN || secrets.GITHUB_TOKEN }}
        TEST_GITHUB_USERNAME: ${{ secrets.TEST_GITHUB_USERNAME }}
        TEST_GITHUB_USER_TOKEN: ${{ secrets.TEST_GITHUB_USER_TOKEN }}
      run: |
        echo "Running feedback lines integration test with real repository..."
        node tests/test-feedback-lines-integration.mjs

    - name: Run Sentry integration test
      run: |
        echo "Running test suite for Sentry integration..."
        node tests/test-sentry.mjs

    - name: Run telegram-bot dry-run test (Issue #487)
      run: |
        echo "Running test suite for telegram-bot --dry-run mode..."
        node tests/test-telegram-bot-dry-run.mjs

  # === EXECUTION TESTS ===
  test-execution:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-compilation]
    if: needs.detect-changes.outputs.any-code-changed == 'true' || needs.detect-changes.outputs.workflow-changed == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install dependencies
      run: npm install

    - name: Test solve.mjs execution
      run: |
        echo "Testing solve.mjs basic execution..."
        timeout 10s ./src/solve.mjs --help || echo "Help command completed"
        echo "‚úÖ solve.mjs executes without critical errors"
        timeout 10s ./src/solve.mjs --version || true

    - name: Test hive.mjs execution
      run: |
        echo "Testing hive.mjs basic execution..."
        timeout 10s ./src/hive.mjs --help || echo "Help command completed"
        echo "‚úÖ hive.mjs executes without critical errors"
        timeout 10s ./src/hive.mjs --version || true

    - name: Test telegram-bot.mjs execution
      run: |
        echo "Testing telegram-bot.mjs basic execution..."
        timeout 10s ./src/telegram-bot.mjs --help || echo "Help command completed"
        echo "‚úÖ telegram-bot.mjs executes without critical errors"

        echo ""
        echo "Testing telegram-bot.mjs --dry-run with issue #487 command..."
        timeout 10s ./src/telegram-bot.mjs \
          --token "test_token_123" \
          --allowed-chats "(-1002975819706 -1002861722681)" \
          --no-hive \
          --solve-overrides $'( \n  --auto-continue\n  --attach-logs\n  --verbose\n  --no-tool-check\n)' \
          --dry-run
        echo "‚úÖ Issue #487 command passes with --dry-run"
    
    - name: Test memory-check.mjs execution
      run: |
        ./src/memory-check.mjs --help
        ./src/memory-check.mjs --min-memory 10 --min-disk-space 100 --json

    - name: Test global command installation
      run: |
        echo "Testing npm global command installation from local folder..."
        npm link
        echo "‚úÖ npm link completed successfully"

        echo ""
        echo "Testing 'hive' global command..."
        timeout 10s hive --version || true
        timeout 10s hive --help || echo "Help command completed"
        echo "‚úÖ 'hive' global command works"

        echo ""
        echo "Testing 'solve' global command..."
        timeout 10s solve --version || true
        timeout 10s solve --help || echo "Help command completed"
        echo "‚úÖ 'solve' global command works"

        echo ""
        echo "Testing 'hive-telegram-bot' global command..."
        timeout 10s hive-telegram-bot --help || echo "Help command completed"
        echo "‚úÖ 'hive-telegram-bot' global command works"

        echo ""
        echo "Testing hive-telegram-bot --dry-run (issue #487)..."
        timeout 10s hive-telegram-bot \
          --token "test_token" \
          --allowed-chats "(-1 -2)" \
          --no-hive \
          --solve-overrides "(--auto-continue --verbose)" \
          --dry-run
        echo "‚úÖ 'hive-telegram-bot --dry-run' works"

        echo ""
        echo "Cleaning up global link..."
        npm unlink || true

    - name: Test hive dry-run with solve integration
      run: |
        echo "Testing hive dry-run mode with solve command integration..."
        # Test that hive passes --dry-run and --skip-claude-check to solve
        timeout 30s ./src/hive.mjs https://github.com/test/repo --dry-run --skip-claude-check --once --max-issues 1 2>&1 | tee hive_dry_run.log || true

        # Check that the solve command was called with the correct flags
        if grep -q "solve.*--dry-run.*--skip-claude-check" hive_dry_run.log; then
          echo "‚úÖ hive correctly passes --dry-run and --skip-claude-check flags to solve command"
        else
          echo "‚ö†Ô∏è Could not verify flag propagation in dry-run mode (may be due to no issues found)"
        fi

        # Test solve.mjs directly with dry-run and skip-claude-check
        echo ""
        echo "Testing solve.mjs with --dry-run and --skip-claude-check flags..."
        timeout 10s ./src/solve.mjs https://github.com/test/repo/issues/1 --dry-run --skip-claude-check 2>&1 | head -20 || true
        echo "‚úÖ solve.mjs accepts --dry-run and --skip-claude-check flags"

  # === MEMORY CHECKS - LINUX ===
  memory-check-linux:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-compilation]
    if: needs.detect-changes.outputs.any-code-changed == 'true' || needs.detect-changes.outputs.workflow-changed == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: System info
      run: |
        echo "=== System Information ==="
        uname -a
        echo ""
        echo "=== Memory Information ==="
        free -h
        echo ""
        echo "=== Disk Information ==="
        df -h
        echo ""
        echo "=== CPU Information ==="
        lscpu | head -20
    
    - name: Run memory-check tests
      run: |
        chmod +x tests/test-memory-check.mjs
        node tests/test-memory-check.mjs
    
    - name: Test memory-check with various thresholds
      run: |
        echo "Testing with low thresholds (should pass)..."
        ./src/memory-check.mjs --min-memory 10 --min-disk-space 100 --json
        
        echo ""
        echo "Testing verbose output..."
        ./src/memory-check.mjs --min-memory 10 --min-disk-space 100
        
        echo ""
        echo "Testing quiet mode..."
        ./src/memory-check.mjs --min-memory 10 --min-disk-space 100 --quiet --json
    
    - name: Test memory-check failure conditions
      run: |
        echo "Testing with impossible memory requirement (should fail)..."
        if ./src/memory-check.mjs --min-memory 999999 --exit-on-failure --quiet --json; then
          echo "ERROR: Should have failed with impossible memory requirement"
          exit 1
        else
          echo "‚úÖ Correctly failed with impossible memory requirement"
        fi
        
        echo ""
        echo "Testing with impossible disk requirement (should fail)..."
        if ./src/memory-check.mjs --min-disk-space 999999999 --exit-on-failure --quiet --json; then
          echo "ERROR: Should have failed with impossible disk requirement"
          exit 1
        else
          echo "‚úÖ Correctly failed with impossible disk requirement"
        fi

  # === MEMORY CHECKS - MACOS ===
  # Temporarily disabled - can be re-enabled later
  memory-check-macos:
    runs-on: macos-latest
    needs: [detect-changes, test-compilation]
    if: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: System info
      run: |
        echo "=== System Information ==="
        uname -a
        echo ""
        echo "=== Memory Information ==="
        vm_stat
        echo ""
        echo "=== Disk Information ==="
        df -h
        echo ""
        echo "=== Swap Information ==="
        sysctl vm.swapusage
        echo ""
        echo "=== CPU Information ==="
        sysctl -n machdep.cpu.brand_string
        sysctl hw.ncpu
    
    - name: Run memory-check tests
      run: |
        chmod +x tests/test-memory-check.mjs
        node tests/test-memory-check.mjs
    
    - name: Test memory-check with various thresholds
      run: |
        echo "Testing with low thresholds (should pass)..."
        ./src/memory-check.mjs --min-memory 10 --min-disk-space 100 --json
        
        echo ""
        echo "Testing verbose output..."
        ./src/memory-check.mjs --min-memory 10 --min-disk-space 100
        
        echo ""
        echo "Testing quiet mode..."
        ./src/memory-check.mjs --min-memory 10 --min-disk-space 100 --quiet --json
    
    - name: Test memory-check failure conditions
      run: |
        echo "Testing with impossible memory requirement (should fail)..."
        if ./src/memory-check.mjs --min-memory 999999 --exit-on-failure --quiet --json; then
          echo "ERROR: Should have failed with impossible memory requirement"
          exit 1
        else
          echo "‚úÖ Correctly failed with impossible memory requirement"
        fi
        
        echo ""
        echo "Testing with impossible disk requirement (should fail)..."
        if ./src/memory-check.mjs --min-disk-space 999999999 --exit-on-failure --quiet --json; then
          echo "ERROR: Should have failed with impossible disk requirement"
          exit 1
        else
          echo "‚úÖ Correctly failed with impossible disk requirement"
        fi
    
    - name: Test macOS-specific features
      run: |
        echo "Testing macOS swap detection..."
        output=$(./src/memory-check.mjs --min-memory 10 --quiet --json)
        if echo "$output" | grep -q '"swap"'; then
          echo "‚úÖ Swap information detected in output"
        else
          echo "‚ö†Ô∏è  Warning: Swap information not found in output"
        fi

  # === MEMORY CHECKS - WINDOWS ===
  # Temporarily disabled due to use-m bug on Windows: https://github.com/link-foundation/use-m/issues/45
  # The Windows support code is implemented but use-m fails to load on Windows
  memory-check-windows:
    runs-on: windows-latest
    needs: [detect-changes, test-compilation]
    # DISABLED: use-m doesn't work on Windows - see use-m-issues/issue-04-windows-fetch-undefined.mjs
    if: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: System info
      shell: cmd
      run: |
        echo === System Information ===
        systeminfo | findstr /C:"OS Name" /C:"OS Version" /C:"System Type"
        echo.
        echo === Memory Information ===
        REM wmic is deprecated in Windows Server 2025, use PowerShell instead
        powershell -Command "Get-CimInstance Win32_OperatingSystem | Select-Object TotalVisibleMemorySize, FreePhysicalMemory | Format-List"
        echo.
        echo === Disk Information ===
        powershell -Command "Get-CimInstance Win32_LogicalDisk | Select-Object Caption, Size, FreeSpace | Format-Table"
    
    - name: Test memory-check execution
      shell: bash
      run: |
        echo "Node version: $(node --version)"
        echo "Testing memory-check.mjs on Windows..."
        node ./src/memory-check.mjs --min-memory 10 --min-disk-space 100
        
        echo ""
        echo "Testing with JSON output..."
        node ./src/memory-check.mjs --min-memory 10 --min-disk-space 100 --json

  # === DOCUMENTATION VALIDATION ===
  validate-docs:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-changed == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Validate documentation files
      run: |
        echo "Running documentation validation tests..."
        chmod +x tests/docs-validation.mjs
        node tests/docs-validation.mjs

  # === PUBLISH TO NPM ===
  publish:
    if: always()
    runs-on: ubuntu-latest
    needs: [detect-changes, test-compilation, test-suites, test-execution, memory-check-linux, validate-docs]
    permissions:
      contents: write  # Required for creating releases
      packages: write  # Required for publishing packages

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        registry-url: 'https://registry.npmjs.org'

    - name: Publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ needs.detect-changes.outputs.new-version }}" != "true" ]; then
          echo "‚äò Publishing skipped (no new version detected)"
          echo "  new-version output: ${{ needs.detect-changes.outputs.new-version }}"
          exit 0
        fi

        echo "‚úì New version detected, proceeding with publish"

        # Make scripts executable
        chmod +x src/hive.mjs
        chmod +x src/solve.mjs

        # Publish to NPM
        npm publish --access public

        # Create GitHub Release
        VERSION=${{ needs.detect-changes.outputs.version }}
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        gh release create "v${VERSION}" \
          --title "${VERSION}" \
          --notes "https://www.npmjs.com/package/${PACKAGE_NAME}/v/${VERSION}"

    - name: Upload Source Maps to Sentry
      if: needs.detect-changes.outputs.new-version == 'true'
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        echo "üì§ Uploading source maps to Sentry for version ${{ needs.detect-changes.outputs.version }}"
        chmod +x scripts/upload-sourcemaps.mjs
        node scripts/upload-sourcemaps.mjs